1.Explain Life cycle in Class Component and functional component with Hooks




Life Cycle in Class Components:

Class components in React have a well-defined life cycle with methods that get called at different stages of a component's existence. Here's a typical life cycle for a class component:

1. Mounting:
   - `constructor()`: This is the constructor of the component, and it's called when the component is created.
   - `render()`: The `render` method is responsible for rendering the component's UI.
   - `componentDidMount()`: This method is called after the component is rendered in the DOM. It's commonly used for making API calls and setting up event listeners.

2. Updating:
   - `shouldComponentUpdate(nextProps, nextState)`: This method is called before rendering when new props or state are received. It allows you to control whether the component should re-render or not.
   - `render()`: Re-rendering the component.
   - `componentDidUpdate(prevProps, prevState)`: Called after the component updates. It's useful for tasks like handling state changes, making additional API requests, or updating the DOM.

3. Unmounting:
   - `componentWillUnmount()`: Called just before the component is removed from the DOM. It's used for cleanup tasks like removing event listeners or canceling network requests.

Life Cycle in Functional Components with Hooks:

Functional components with hooks simplify the component life cycle. Here's a basic comparison to the class component life cycle:

1. Mounting:
   - `useState()` and `useEffect()` hooks are used for component state and side effects.
   - The equivalent of `componentDidMount` in functional components is achieved by using `useEffect` with an empty dependency array.

2. Updating:
   - The `useState` hook is used to manage component state.
   - The `useEffect` hook is also used for handling side effects, and you can specify dependencies to control when it runs.

3. Unmounting:
   - There's no direct equivalent to `componentWillUnmount`, but you can achieve the same cleanup functionality by returning a cleanup function in the `useEffect` hook.

Here's a simple example of a functional component with hooks:


import React, { useState, useEffect } from 'react';

export default function MyComponent() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    
    document.title = `Count: ${count}`;

   
    return () => {
      document.title = 'My App';
    };
  }, [count]);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
